# -*- coding: utf-8 -*-
"""recommendation_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDoR2xF3ZViYpu2daiCbMvuIJsCBVNz9
"""

! pip install opendatasets

import numpy as np
import pandas as pd
import os
import pathlib
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from sklearn.metrics.pairwise import linear_kernel
from sklearn.model_selection import train_test_split
import opendatasets as od

"""# Data Preparation"""

# membuat path dari fashion-dataset
def prepare_data():
    od.download('https://www.kaggle.com/datasets/paramaggarwal/fashion-product-images-dataset/')

    path = 'fashion-product-images-dataset/fashion-dataset/'
    dataset_path = pathlib.Path(path)
    dirs_names = os.listdir(dataset_path)

    return path, dataset_path, dirs_names

path, dataset_path, dirs_names = prepare_data()

"""# Modelling and Get Image Embeddings"""

# Memuat sebuah dataframe yang berisi detail styles dan images(gambar-gambar)
def get_styles_df(styles_path):
  styles_df = pd.read_csv(styles_path, nrows=6000, error_bad_lines=False) # Membaca 6000 produk dan membuang bad lines
  styles_df['image'] = styles_df.apply(lambda x: str(x['id']) + ".jpg", axis=1) # Membuat format setiap kolom image (id.jpg)
  return styles_df

# Mengambil id dari image dan membuat path dari nama tersebut
def img_path(img):
    return path + 'images/' + img

# Buat prediksi
def predict(model, img_name,):
    """ Load and preprocess image then make prediction """
    # Reshape
    img = image.load_img(img_path(img_name), target_size=(100, 100))
    # Convert image menjadi array
    img = image.img_to_array(img)
    # Expand Dim (1, w, h)
    img = np.expand_dims(img, axis=0)
    # Pre-proses Input
    img = preprocess_input(img)
    return model.predict(img)

# Melakukan penyematan dan mengaplikasikan model terhadap gambar
def get_embeddings(df, model):
    """ Return a dataframe contains images features """
    df_embeddings = df['image'].apply(lambda x: predict(model, x).reshape(-1))
    df_embeddings = df_embeddings.apply(pd.Series)
    return df_embeddings

"""# Find Recommendation Based on Similarity"""

# Mencari similaritas(kemiripan) dari gambar yang dipilih berdasarkan hasil prediksi dari model menggunakan linear kernel
def get_similarity(model,image_name,df_embeddings):
    sample_image = predict(model, image_name)
    df_sample_image = pd.DataFrame(sample_image)
    sample_similarity = linear_kernel(df_sample_image, df_embeddings)
    return sample_similarity

# Melakukan normalisasi terhadap similarity(kemiripan)
def normalize_sim(similarity):
    x_min = similarity.min(axis=1)
    x_max = similarity.max(axis=1)
    norm = (similarity-x_min)/(x_max-x_min)[:, np.newaxis]
    return norm

# Membuat 5 rekomendasi gambar lainnya untuk gambar yang dipilih sesuai dengan similaritasnya(kemiripan)
def get_recommendations(df, similarity):
    # Mencari pairwsie (pasangan) antara index dan skor similaritasnya(kemiripan) masing-masing gambar
    sim_scores = list(enumerate(similarity[0]))

    # Mengurutkan setiap gambar berdasarkan skor similaritasnya(kemiripan)
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Memilih 5 gambar yang paling tinggi tingkat similaritasnya
    sim_scores = sim_scores[0:5]
    print(sim_scores)
    # Get the clothes indices
    cloth_indices = [i[0] for i in sim_scores]

    # Return the top 5 most similar products
    return df['image'].iloc[cloth_indices]

# Menampilkan gambar lainnya yang memiliki similarity yang cukup besar dengan gambar yang dipilih
def print_recommendations(recommendation_list):
  # recommendation = get_recommendations(styles_df, sample_similarity_norm)
  # recommendation_list = recommendation.to_list()
  #recommended images
  plt.figure(figsize=(20,20))
  for j, img_name in enumerate(recommendation_list, 1):
        plt.subplot(6, 10, j)
        cloth_img = mpimg.imread(path + 'images/' + img_name)
        plt.imshow(cloth_img)
        plt.axis("off")
  plt.title("Recommended images", loc='left')
  plt.subplots_adjust(wspace=-0.5, hspace=1)
  plt.show()

"""# Building the Model"""

# Menyiapkan data
path, dataset_path, dirs_names = prepare_data()

styles_path = 'fashion-product-images-dataset/fashion-dataset/styles.csv'
styles_df = get_styles_df(styles_path)

# Asumsikan ukuran image
image_size = (100, 100)

def load_model(image_size,num_channels):
    base_model = VGG16(include_top=False, weights='imagenet',
                       input_shape=(image_size[0], image_size[1], num_channels))
    base_model.trainable = False

    model = models.Sequential([
        base_model,
        layers.GlobalAveragePooling2D(),
        layers.Dense(256, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(64, activation='relu'),
        layers.Dropout(0.5),
        layers.Dense(1, activation='linear')  # Asumsikan linear
    ])

    model.compile(optimizer='adam', loss='mean_squared_error',metrics=['accuracy'])

    return model

# Define and load the model
vgg16_model = load_model(image_size, num_channels=3)

url = "fashion-product-images-dataset/fashion-dataset/images/10037.jpg"
a = plt.imread(url)
plt.imshow(a)

# Membuat penyematan
df_embeddings = get_embeddings(styles_df, vgg16_model)

image_name = '10037.jpg'

sample_similarity = get_similarity(vgg16_model,image_name,df_embeddings)
sample_similarity_norm = normalize_sim(sample_similarity)

# Diasumsikan variabel target (misalnya, skor kesamaan) di style_df
target_labels = styles_df['image'].apply(lambda x: sample_similarity_norm[0, styles_df['image'].tolist().index(x)])

"""# Training the Model"""

# Menyiapkan data
X_train, X_val, y_train, y_val = train_test_split(df_embeddings, target_labels, test_size=0.2, random_state=42)

# Convert DataFrames menjadi NumPy arrays
X_train = X_train.to_numpy()
X_val = X_val.to_numpy()

num_features = X_train.shape[1]

# Reshape input data supaya sesuai dengan input shape of VGG16
# Reshape setiap baris secara terpisah
X_train = X_train.reshape((-1, 1, 1, num_features))
X_val = X_val.reshape((-1, 1, 1, num_features))

# Memastikan y_train dan y_val merupakan NumPy arrays
y_train = np.array(y_train)
y_val = np.array(y_val)

# Mengulang setiap fitur-fitur antara width dan height dari image agar sesuai dengan input shape
X_train = np.repeat(X_train, 100, axis=1)
X_train = np.repeat(X_train, 100, axis=2)

X_val = np.repeat(X_val, 100, axis=1)
X_val = np.repeat(X_val, 100, axis=2)

# Buat representasi seperti RGB dengan mereplikasi single channel (bnw)
X_train_rgb = np.repeat(X_train, 3, axis=-1)
X_val_rgb = np.repeat(X_val, 3, axis=-1)

# Train the model
history = vgg16_model.fit(
    X_train_rgb, y_train,
    epochs=10,
    batch_size=32,
    validation_data=(X_val_rgb, y_val)
)

# Save the model
if __name__ == '__main__':
    # DO NOT CHANGE THIS CODE
    vgg16_model.save("Recommendation_System.h5")